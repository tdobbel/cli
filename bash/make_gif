#!/usr/bin/env bash

lossy=80
div=2
no_gif=false

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -f|--frame-format) fformat="$2"; shift;;
        -d|--duration) duration="$2"; shift;;
        -o|--output-name) output_name="$2"; shift;;
        -s|--small) div=2.66;;
        -l|--lossy) lossy="$2"; shift;;
        --no-gif) no_gif=true;;
        *) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
done

counter=0
while [ -f $(printf "$fformat" "$counter") ]; do
    counter=$(($counter+1))
done
frate=$(($counter / $duration))
if [ $frate -eq 0 ]; then
    echo "Duration is too long"
    frate=0.5
fi

if [ $counter -eq 0 ]; then
    echo "No frames found"
    exit 1
fi

ffmpeg -y -r $frate -f image2 -vb 5000k -i $fformat -vf "scale=trunc(iw/$div)*2:trunc(ih/$div)*2" -crf 20 -c:v libx264 -tune animation -pix_fmt yuv420p $output_name.mp4
if $no_gif; then
    exit 0
fi
ffmpeg -y -i $output_name.mp4 -filter_complex "[0:v] palettegen" palette.png
ffmpeg -y -i $output_name.mp4 -i palette.png -filter_complex "[0:v][1:v] paletteuse" $output_name.gif
if ! [ -x "$(command -v gifsicle)" ]; then
    echo "gifsicle is not installed. Skipping optimization"
    exit 0
fi
optimized=$(printf "%s_optimized.gif" $output_name)
gifsicle -O3 --lossy=$lossy --colors 256 $output_name.gif -o $optimized

exit 0
